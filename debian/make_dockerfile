#!/usr/bin/env bash
if [ -z "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi

# This script generates a docker file to install any of a large number of
# dpkg/debootstrap based distributions. Note that most of the bulk is
# dealing with old releases that are no longer properly supported by the
# current release of debootstrap.

# TODO:
#	Use git version instead of alpine version of debootstrap ?
#	Patch debootstrap directly (with git?)
#	Add other distros?
#	Add "Parrot" https://github.com/ParrotSec/debootstrap
#	Look at "febootstrap" ? https://linux.die.net/man/8/febootstrap
#	? http://archive.gnewsense.org/gnewsense/dists/ ?

main() {
    set -e
    if [ "$1" = -b ]
    then make_dockerfile baseonly
    elif [ ".$1." = .-. ]
    then make_dockerfile
    else
	make_dockerfile > "_tmp.doc"
	if cmp -s "_tmp.doc" "${1:-Dockerfile}"
	then rm "_tmp.doc"
	else mv "_tmp.doc" "${1:-Dockerfile}"
	fi
    fi
}

make_dockerfile() {
    if [ "$1" = '' ] ; then
cat <<\@
#--------------------------------------------------------------------------#
# We could use any Linux that has debootstrap available.
# Ideally we want the smallest possible.
# Alpine is very small, but only has a Debian keyring.
# So I use git to fetch some others over https.
#
# Working 'RELEASE' files include the default "stable" and ...
# From Debian:
#   potato woody sarge etch lenny squeeze wheezy
#   jessie stretch buster bullseye unstable
# From Ubuntu:
#   artful bionic breezy cosmic disco eoan focal
#   groovy intrepid jaunty karmic maverick natty
#   oneiric precise quantal raring saucy trusty
#   utopic vivid wily xenial yakkety zesty
# From Devuan:
#   jessie:devuan ascii beowulf chimaera ceres
# From Kali:
#   kali-dev kali-rolling kali-last-snapshot
# From PureOS:
#   amber
#
# The ARCH option can be set to i386 for most of these (and is defaulted to
# i386 for some like Debian Woody)
#
# The MIRROR allows you to set the mirror to use and then
# the DEBSCRIPT arg lets you use a deboostrap script different
# from the RELEASE name ("sid" is the normal fallback).
# The DEBOPTIONS arg allows you to add more options to debootstrap.
#
# The INSTALL arg is a list of packages to install just before the
# final cleanup.
#
# The INCLUDE arg is a list of packages to include during stage 1.
#
# I'm using the base64 stuff to make things prettier :-)

#--------------------------------------------------------------------------#
@
    fi

    docker_cmd FROM 'alpine AS unpack'
    docker_cmd WORKDIR '/root'

    docker_start || {
	apk add --no-cache debootstrap perl git
    } ; docker_commit "Configure host"

    # Note: https://salsa.debian.org/installer-team/debootstrap.git

    # shellcheck disable=SC2016
    docker_start || {

	: Current debootstrap has bug
	sed -i -e 's/echo \${USE_COMPONENTS}/echo "\${USE_COMPONENTS}"/' \
	    /usr/share/debootstrap/functions

	DIR=/usr/share/debootstrap/scripts

	: 'Repair Debian scripts'
	sed -e '4a default_mirror http://archive.debian.org/debian' \
	    < "$DIR/wheezy" > "$DIR/wheezy.2"
	mv "$DIR/wheezy.2" "$DIR/wheezy"

	: 'Not-revoked Debian key for potato'
	sed -i -e 's@^\(keyring\) .*@\1 /root/potato-key.gpg@' "$DIR/potato"

	: Repair Ubuntu scripts
	for SCRIPT in warty hoary warty.buildd hoary.buildd
	do sed -i -e '4i force_md5' "$DIR/$SCRIPT"
	done
	ln -fs gutsy "$DIR/groovy"
	sed -i -e 's/archive\.ubuntu/old-releases.ubuntu/' "$DIR/dapper"

	: Fix Ubuntu archive keyrings
	sed -i -e 's/^\(keyring\)/#\1 /' "$DIR/gutsy"
	sed -i -e '/default_mirror.*old-releases\.ubuntu/a keyring /usr/share/keyrings/ubuntu-archive-removed-keys.gpg' "$DIR/gutsy"
	sed -i -e '/default_mirror.*archive\.ubuntu/a keyring /usr/share/keyrings/ubuntu-archive-keyring.gpg' "$DIR/gutsy"
	sed -i -e '/default_mirror.*ports\.ubuntu/a keyring /usr/share/keyrings/ubuntu-archive-keyring.gpg' "$DIR/gutsy"

	: Add newer Ubuntu releases
	awk < "$DIR/gutsy" > "$DIR/gutsy.2" \
	'F==1{print;next;}
	 /zesty)/ {
	    print "artful|cosmic|disco|zesty)"
	    print "default_mirror http://old-releases.ubuntu.com/ubuntu"
	    print "keyring /usr/share/keyrings/ubuntu-archive-keyring.gpg"
	    print ";;"
	    F=1; }
	 {print;}'
	mv "$DIR/gutsy.2" "$DIR/gutsy"

	: Ubuntu keys
	git clone \
	    -b ubuntu/devel \
	    https://git.launchpad.net/ubuntu/+source/ubuntu-keyring ||:
	cp -a ubuntu-keyring/keyrings/*.gpg /usr/share/keyrings/. ||:

	: Repair or create the Devuan scripts.
	sed < $DIR/sid > $DIR/devuan \
	    -e 's:^keyring .*:keyring /usr/share/keyrings/devuan-archive-keyring.gpg:' \
	    -e '4i default_mirror http://deb.devuan.org/merged'

	ln -fs devuan $DIR/ascii
	ln -fs devuan $DIR/beowulf
	ln -fs devuan $DIR/chimaera
	ln -fs devuan $DIR/ceres

	: Devuan keys
	{
	    git clone https://git.devuan.org/devuan/devuan-keyring.git ||:
	    cp -a devuan-keyring/keyrings/*.gpg /usr/share/keyrings/. ||:
	    cp -a devuan-keyring/public_keys/*/*.gpg /usr/share/keyrings/. ||:
	}

	: PureOS script default is HTTPS
	[ -e "$DIR/amber" ] &&
	    grep -q -e '^default_mirror https' "$DIR/amber" &&
		sed -i -e '1i unset DEF_HTTPS_MIRROR' "$DIR/amber"

	: Kali has an https mirror
	[ -e "$DIR/kali" ] &&
	    sed -i -e '1i unset DEF_HTTPS_MIRROR' \
		-e 's@^\(default_mirror\) .*@\1 https://http.kali.org/kali@' \
		"$DIR/kali"

	: "Some old Ubuntu releases don't see that Docker has setup /proc"
	sed -i -e 's/\<setup_proc/: setup_proc/' $DIR/edgy
	sed -i -e 's/\<setup_proc/: setup_proc/' $DIR/feisty

    } ; docker_commit "Configure debootstrap"

    docker_cmd

    # shellcheck disable=SC2086
    docker_start || {
	: "Stage 1 for $RELEASE $ARCH" $STAMP

	DIR=/usr/share/debootstrap/scripts
	case "$RELEASE" in
	potato|woody|sarge ) ARCH="${ARCH:-i386}" ;;

	etch|lenny|squeeze|wheezy )
	    if [ "$ARCH" != i386 ]
	    then
		grep -q vsyscall /proc/$$/maps || {
		    echo >&2 "ERROR: Debian $RELEASE requires the vsyscall memory section."
		    echo >&2 "Add vsyscall=emulate or vsyscall=native to kernel command line."
		    echo >&2 "Alternatively use the i386 architecture."
		    exit 22
		}
	    fi
	    ;;

	warty|hoary|breezy|dapper|edgy|feisty|gutsy|hardy|intrepid|jaunty|karmic )
	    if [ "$ARCH" != i386 ]
	    then
		grep -q vsyscall /proc/$$/maps || {
		    echo >&2 "ERROR: Ubuntu $RELEASE requires the vsyscall memory section."
		    echo >&2 "Add vsyscall=emulate or vsyscall=native to kernel command line."
		    exit 22
		}
	    fi
	    if [ "$ARCH" = i386 ]
	    then
		case "$RELEASE" in
		warty|hoary )
		    [ "$(cat /proc/sys/vm/mmap_min_addr)" -gt 4096 ] && {
			echo >&2 "ERROR: Ubuntu $RELEASE needs /proc/sys/vm/mmap_min_addr"
			echo >&2 "reduced to 4096 on the host and vdso disabled"
			exit 23
		    }
		esac
	    fi
	    ;;

	*:* )
	    [ "$DEBSCRIPT" = '' ] &&
		[ -e "$DIR/${RELEASE##*:}" ] &&
		    DEBSCRIPT="${RELEASE##*:}"

	    [ ! -e "$DIR/${DEBSCRIPT:-${RELEASE%:*}}" ] &&
		ln -fs sid "$DIR/${DEBSCRIPT:-${RELEASE%:*}}"
	    ;;

	* ) # If no such script, guess it's like "sid"
	    [ ! -e "$DIR/${DEBSCRIPT:-${RELEASE%:*}}" ] &&
		ln -fs sid "$DIR/${DEBSCRIPT:-${RELEASE%:*}}"
	    ;;
	esac
	ARCH="${ARCH:-amd64}"
	INCEXTRA=''

	if grep -q '^keyring.*ubuntu' "$DIR/${DEBSCRIPT:-$RELEASE}"
	then COMP="--components=main,restricted,universe,multiverse"
	else COMP="--components=main,contrib,non-free"
	fi

	[ "$VARIANT" = '' ] && {
	    grep -q '^variants.*minbase' "$DIR/${DEBSCRIPT:-$RELEASE}" &&
		VARIANT="minbase"
	}

	[ "${VARIANT:-minbase}" = minbase ] && {
	    case "$RELEASE" in

	    potato|woody )
		# This aren't needed and some are messy to remove.
		# This is nearly a minbase, but apt and netbase aren't "essential"!
		EXTRA='--exclude=mbr,modconf,pciutils,pcmcia-cs,modutils,lilo'
		EXTRA="$EXTRA,ppp,pppoe,pppconfig,pppoeconf,console-tools"
		EXTRA="$EXTRA,console-tools-libs,exim,cron,at,mailx,logrotate"
		EXTRA="$EXTRA,libident,libldap2,liblockfile1,libpcap0,libpcre3"
		EXTRA="$EXTRA,sysklogd,klogd,fdutils,dhcp-client,setserial"
		EXTRA="$EXTRA,libreadline4,libsasl7,syslinux,makedev"
		EXTRA="$EXTRA,console-data,base-config,adduser,tasksel"
		EXTRA="$EXTRA,ae,fbset,fdflush,pump,isapnptools,xviddetect"
		EXTRA="$EXTRA,telnet,ftp,gettext-base,elvis-tiny"
		;;

	    sarge )
		# Exim records the build hostname, man-db has a random index.
		EXTRA='--exclude=exim4,exim4-base,exim4-config,exim4-daemon-light'
		EXTRA="$EXTRA,at,mailx,man-db"
		;;

	    jessie )
		EXTRA='--exclude=systemd,systemd-sysv'
		EXTRA="$EXTRA,acl,adduser,dmsetup,libcap2,libcap2-bin"
		EXTRA="$EXTRA,libcryptsetup4,libdevmapper1.02.1,libkmod2"
		EXTRA="$EXTRA,libncursesw5,libprocps3,libudev1,udev"
		INCEXTRA='sysvinit-core'
		;;

	    warty|hoary )
		EXTRA="--exclude=adduser,alsa-base,alsa-utils,at,base-config"
		EXTRA="$EXTRA,bind9-host,bsdmainutils,console-common"
		EXTRA="$EXTRA,console-data,console-tools,cpio,cramfsprogs"
		EXTRA="$EXTRA,cron,dbus-1,dhcp3-client,dhcp3-common,discover1"
		EXTRA="$EXTRA,discover1-data,dmsetup,dnsutils,dosfstools"
		EXTRA="$EXTRA,ed,eject,evms,evms-ncurses,fdutils,file,ftp"
		EXTRA="$EXTRA,gettext-base,gnupg,groff-base,hdparm,hotplug"
		EXTRA="$EXTRA,ifrename,ifupdown,info,initrd-tools,iproute"
		EXTRA="$EXTRA,iptables,iputils-tracepath,jfsutils,klogd"
		EXTRA="$EXTRA,libasound2,libatm1,libbz2-1.0,libconsole,libdb4.2"
		EXTRA="$EXTRA,libdevmapper1.00,libdiscover1,libdns16,libevms-2.3"
		EXTRA="$EXTRA,libexpat1,libfribidi0,libgc1,libgcrypt7"
		EXTRA="$EXTRA,libgdbm3,libgnutls10,libgpg-error0,libgpmg1"
		EXTRA="$EXTRA,libidn11,libisc7,libiw27,libldap2,liblockfile1"
		EXTRA="$EXTRA,liblwres1,liblzo1,libmagic1,libncursesw5"
		EXTRA="$EXTRA,libopencdk8,libparted1.6-0,libpcap0.7,libpcap0.8"
		EXTRA="$EXTRA,libreiserfs0.3-0,libsasl2,libsigc++-1.2-5c102"
		EXTRA="$EXTRA,libssl0.9.7,libtasn1-2,libusb-0.1-4,libwrap0"
		EXTRA="$EXTRA,logrotate,lshw,lsof,ltrace,lvm-common,lvm10,lvm2"
		EXTRA="$EXTRA,mailx,man-db,manpages,mdadm,mii-diag,mime-support"
		EXTRA="$EXTRA,module-init-tools,mtr-tiny,mutt,nano,netcat"
		EXTRA="$EXTRA,netkit-inetd,ntp,ntpdate,openssh-client,parted"
		EXTRA="$EXTRA,pciutils,popularity-contest,postfix,postfix-tls"
		EXTRA="$EXTRA,ppp,pppconfig,pppoeconf,psmisc,python,python2.3"
		EXTRA="$EXTRA,reiser4progs,reiserfsprogs,reportbug,rsync"
		EXTRA="$EXTRA,strace,sudo,sysklogd,tcpd,tcpdump,telnet,time"
		EXTRA="$EXTRA,ubuntu-base,udev,usbutils,vim,vim-common,w3m"
		EXTRA="$EXTRA,wget,wireless-tools,xfsprogs'"
		;;

	    dapper|edgy|feisty )
		EXTRA='--exclude=initscripts,system-services,ubuntu-minimal'
		EXTRA="$EXTRA,upstart-compat-sys,pcmciautils,alsa-utils"
		EXTRA="$EXTRA,pciutils,libasound2,libfribidi0,libpci2"
		EXTRA="$EXTRA,mii-diag,wireless-tools,wpasupplicant"
		EXTRA="$EXTRA,alsa-base,console-tools,console-common"
		EXTRA="$EXTRA,console-setup,console-terminus,libconsole"
		EXTRA="$EXTRA,ethtool,upstart-logd,xkb-data,udev,sysvinit"
		EXTRA="$EXTRA,initramfs-tools,volumeid,tasksel,tasksel-data"
		EXTRA="$EXTRA,usbutils,libsysfs2,libvolumeid0,klibc-utils"
		EXTRA="$EXTRA,linux-sound-base,module-init-tools"
		EXTRA="$EXTRA,startup-tasks,x11-common,sysklogd,klogd"
		EXTRA="$EXTRA,upstart,libklibc,dhcp3-client,dhcp3-common"
		EXTRA="$EXTRA,eject,laptop-detect,libiw28,dmidecode"
		EXTRA="$EXTRA,grepmap,console-data"
		;;

	    gutsy|hardy )
		EXTRA='--exclude=initscripts,upstart-compat-sysv,system-services'
		;;

	    esac
	}

	case "$RELEASE" in
	gutsy|hardy ) INCEXTRA='gpgv' ;;
	intrepid|jaunty|karmic|lucid|maverick|natty ) INCEXTRA='gpgv' ;;

	ascii|beowulf|chimaera|ceres|*:devuan ) INCEXTRA='devuan-keyring' ;;
	kali-* ) INCEXTRA='kali-archive-keyring' ;;
	amber ) INCEXTRA='pureos-archive-keyring,gnupg' ;;
	esac

	[ "$INCEXTRA$INCLUDE" != '' ] && {
	    [ "$INCEXTRA" != '' ]&&[ "$INCLUDE" != '' ] &&
		INCEXTRA="$INCEXTRA,"
	    INCEXTRA="$INCEXTRA$INCLUDE"
	    INCEXTRA="--include=$INCEXTRA"
	}

	[ "$VARIANT" = default ] && VARIANT=''

	debootstrap --foreign ${ARCH:+--arch="$ARCH"} \
	    ${VARIANT:+--variant="$VARIANT"} \
	    $COMP $DEBOPTIONS $EXTRA $INCEXTRA \
	    "${RELEASE%:*}" chroot "$MIRROR" "$DEBSCRIPT"

	cd /opt/chroot

	[ "$RELEASE" = jessie ] && {
	    : "Systemd is unpacked ready to install even if we don't want it."
	    : "So break the chroot such that it doesn't actually get installed."
	    sed -i -e '/systemd\>.*/d' debootstrap/required
	}

	echo export RELEASE="'$RELEASE'" > tmp/release
	echo "-- $DEBOPTIONS $INCEXTRA"  > tmp/packages

	mv /tmp/stage* tmp

	: "Stage 1 complete for $RELEASE"

    } ; docker_save "Stage 1" /tmp/stage1

    # shellcheck disable=SC2015,SC2016,SC1091,SC2046,SC2086
    docker_start || {
	touch /tmp/release
	. /tmp/release
	rm -f /tmp/release

	: "Start stage 2 for $RELEASE"

	export DEBIAN_FRONTEND=noninteractive

	: Output patch files
	sh /tmp/stage2a ||:

	: 'init sometimes uses ischroot to disable updates. (eg wheezy)'
	if [ -x /usr/bin/ischroot ]&&[ ! -L /usr/bin/ischroot ]
	then dpkg-divert --local --rename --add /usr/bin/ischroot 2>/dev/null &&
	     ln -s /bin/true /usr/bin/ischroot
	fi

	: This option breaks old versions of dpkg
	dpkg --force-unsafe-io --print-architecture 2>/dev/null &&
	    sed -i -e '/^#<off> force-unsafe-io/s/#[^ ]* //' \
	        /etc/dpkg/dpkg.cfg.d/docker-apt-speedup ||:

	# The script policy-rc.d is used by debootstrap
	mv /usr/sbin/policy-rc.d /usr/sbin/policy-rc.d-docker

	/debootstrap/debootstrap --second-stage ||
	    echo "WARNING: Exit status from debootstrap --second-stage is $?" >&2

	# Install correctly.
	update-alternatives --install /usr/sbin/policy-rc.d policy-rc.d \
	    /usr/sbin/policy-rc.d-docker 50

	case "$RELEASE" in
	jessie )
	    : Systemd leaves a mess, unpack it again so dpkg can remove it.
	    dpkg --unpack --force-depends /var/cache/apt/archives/systemd_*.deb
	    : Sigh this breaks sysvinit ...
	    dpkg --unpack --force-depends /var/cache/apt/archives/systemd-sysv_*.deb
	    : Remove them
	    dpkg --purge --force-depends systemd ||:
	    dpkg --purge --force-depends systemd-sysv ||:
	    : Oh, and fix sysvinit
	    dpkg -i /var/cache/apt/archives/sysvinit-core_*.deb
	    # Don't removed the dependancies yet!
	    ;;

	edgy|feisty )
	    : Some packages cannot be configured.
	    dpkg --purge --force-remove-essential \
		$(dpkg -l | awk '/^i[UF]/{print $2;}') ||:
	    rm -rf /.root
	    ;;

	potato )
	    : Allow sysvinit to be reinstalled, but disable restart.
	    ln -s /bin/true /usr/local/sbin/init
	    ;;

	lenny|squeeze )
	    # It appears lenny and squeeze cannot be convinced to ignore
	    # the expired timestamp on the key. Debootstrap did, so INCLUDE=
	    # packages will be authenticated.
	    echo 'APT::Get::AllowUnauthenticated "true";' \
		> /etc/apt/apt.conf.d/insecure-repository
	esac

	dpkg --configure --pending
	dpkg -l dpkg apt base-files

	[ -f /usr/bin/apt-mark ] && {
	    apt-mark auto -qq $(apt-mark showmanual) && {
		[ -f /tmp/packages ] && (
		    ulimit -n 128 ||: Docker gives us 1M fds, Jessie cries.
		    set -- $(cat /tmp/packages)
		    for i
		    do
			case "$i" in
			--include=* )
			    apt-mark manual \
				$(echo "${i#--include=}" |tr , ' ') ||:
			    ;;
			esac
		    done
		)
	    }
	}

	[ "$RELEASE" = jessie ] && {
	    # Remove packages that were installed because systemd tried
	    # to barge in uninvited.
	    (
		ulimit -n 128 ||: Docker gives us 1M fds, Jessie cries.
		apt-get autoremove --purge -y
		apt-get update -y
		apt-get dist-upgrade -y
	    )

	    # Workaround for Jessie apt-get is very slow issue
	    echo >>/root/.bashrc ulimit -n 1024
	}

	[ "$RELEASE" = jessie:devuan ] && {
	    # Workaround for Jessie apt-get is very slow issue
	    echo >>/root/.bashrc ulimit -n 1024
	}

	# We want UTF-8, if supported.
	{
	    echo '[ "$(LANG=C.UTF-8 locale charmap 2>/dev/null)" = UTF-8 ]&&'
	    echo '    export LANG=C.UTF-8'
	} >> /root/.bashrc

	: "Stage 2 complete for $RELEASE"
    } ; docker_save "Stage 2" /tmp/stage2

    docker_start || {

#--------------------------------------------------------------------------#
# Patch apt and dpkg for docker
# Note: standard used "#" for comment not "//"

# ============= etc/apt/apt.conf.d/docker-clean ==============
cat << '@' > '/etc/apt/apt.conf.d/docker-clean'
// Since for most Docker users, package installs happen in "docker build" steps,
// they essentially become individual layers due to the way Docker handles
// layering, especially using CoW filesystems.  What this means for us is that
// the caches that APT keeps end up just wasting space in those layers, making
// our layers unnecessarily large (especially since we'll normally never use
// these caches again and will instead just "docker build" again and make a brand
// new image).

// Ideally, these would just be invoking "apt-get clean", but in our testing,
// that ended up being cyclic and we got stuck on APT's lock, so we get this fun
// creation that's essentially just "apt-get clean".
DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };
APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };

Dir::Cache::pkgcache "";
Dir::Cache::srcpkgcache "";

// Note that we do realize this isn't the ideal way to do this, and are always
// open to better suggestions (https://github.com/debuerreotype/debuerreotype/issues).
@
# ============= etc/apt/apt.conf.d/docker-no-languages ==============
cat << '@' > '/etc/apt/apt.conf.d/docker-no-languages'
// In Docker, we don't often need the "Translations" files, so we're just wasting
// time and space by downloading them, and this inhibits that.  For users that do
// need them, it's a simple matter to delete this file and "apt-get update". :)

Acquire::Languages "none";
@
# ============= etc/apt/apt.conf.d/docker-autoremove-suggests ==============
cat << '@' > '/etc/apt/apt.conf.d/docker-autoremove-suggests'
// Since Docker users are looking for the smallest possible final images, the
// following emerges as a very common pattern:

//   RUN apt-get update \
//       && apt-get install -y <packages> \
//       && <do some compilation work> \
//       && apt-get purge -y --auto-remove <packages>

// By default, APT will actually _keep_ packages installed via Recommends or
// Depends if another package Suggests them, even and including if the package
// that originally caused them to be installed is removed.  Setting this to
// "false" ensures that APT is appropriately aggressive about removing the
// packages it added.

// https://aptitude.alioth.debian.org/doc/en/ch02s05s05.html#configApt-AutoRemove-SuggestsImportant
Apt::AutoRemove::SuggestsImportant "false";
@
# ============= etc/apt/apt.conf.d/docker-gzip-indexes ==============
cat << '@' > '/etc/apt/apt.conf.d/docker-gzip-indexes'
// Since Docker users using "RUN apt-get update && apt-get install -y ..." in
// their Dockerfiles don't go delete the lists files afterwards, we want them to
// be as small as possible on-disk, so we explicitly request that Apt keep them
// compressed on-disk too instead of decompressing them.

// For comparison, an "apt-get update" layer without this on a pristine
// "debian:wheezy" base image was "29.88 MB", where with this it was only
// "8.273 MB".

Acquire::GzipIndexes "true";
@
# ============= etc/dpkg/dpkg.cfg.d/docker-apt-speedup ==============
cat << '@' > '/etc/dpkg/dpkg.cfg.d/docker-apt-speedup'
# For most Docker users, package installs happen during "docker build", which
# doesn't survive power loss and gets restarted clean afterwards anyhow, so
# this minor tweak gives us a nice speedup (much nicer on spinning disks,
# obviously).

#<off> force-unsafe-io
@
# ============= usr/sbin/policy-rc.d ==============
cat << '@' > '/usr/sbin/policy-rc.d'
#!/bin/sh

# For most Docker users, "apt-get install" only happens during "docker build",
# where starting services doesn't work and often fails in humorous ways. This
# prevents those failures by stopping the services from attempting to start.

case "$1" in
--list )
    echo >&2 "Everything is denied by policy."
    ;;
--quiet|'' )
    ;;
* ) echo >&2 "Denied: /usr/sbin/policy-rc.d $*"
    ;;
esac
exit 101 # action forbidden by policy
@
chmod 0755 '/usr/sbin/policy-rc.d'

exit 0

    } ; docker_save "Stage 2a" /tmp/stage2a

    # shellcheck disable=SC2046,SC2086
    docker_start || {
	[ "$INSTALL" != - ] && {
	    # Test that apt is working
	    ulimit -n 128 ||: Docker gives us 1M fds, Jessie cries.
	    apt-get update -y
	    apt-get install -y dc
	    apt-get remove --purge -y dc

	    # Download and install any defined packages
	    [ "$INSTALL" != '' ] &&
		apt-get install -y $(echo "$INSTALL" | tr , ' ')
	}

	: "Clean lists, cache and history."
	apt-get update -qq --list-cleanup -oDir::Etc::SourceList=/dev/null ||
	    rm -rf /var/lib/apt/lists/*
	apt-get clean
	dpkg --clear-avail
	rm -f /var/cache/apt/pkgcache.bin
	rm -f /etc/apt/apt.conf.d/01autoremove-kernels
	rm -f /var/lib/dpkg/*-old
	rm -f /etc/*-
	rm -rf /var/tmp/* /tmp/*
	:|find /var/log -type f ! -exec tee {} \;

	# Label
	[ -e /etc/debian_chroot ] || echo docker > /etc/debian_chroot

	# Workaround for old "dpkg --clear-avail" bug.
	# Done on potato, woody, sarge and etch.
	[ ! -x /usr/bin/dselect ] || {
	    echo Package: dpkg > /var/lib/dpkg/available
	    echo Version: 0.1 >> /var/lib/dpkg/available
	}

	# File /etc/apt/trustdb.gpg only contains the date it was created
	rm -f /etc/apt/trustdb.gpg ||:

	# Looks like we have to copy the image so we can ignore the
	# files that Docker randomises
	mkdir -p /tmp/chroot
	tar -cf - --one-file-system \
	    --exclude=./tmp/chroot \
	    --exclude=./etc/hostname \
	    --exclude=./etc/hosts \
	    --exclude=./etc/resolv.conf \
	    . |
	    (cd /tmp/chroot ; tar xf - )
	sed "/$(cat /etc/hostname)/d" /etc/hosts > /tmp/chroot/etc/hosts

    } ; docker_save "Extras and Cleanup" /tmp/stage3

    docker_cmd
    docker_savefile 'Debian Potato key' /root/potato-key.gpg < potato-key.gpg

    docker_cmd
    docker_cmd WORKDIR '/opt'
    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd

    [ "$1" = baseonly ] && return 0

    docker_cmd ARG 'RELEASE=stable'
    docker_cmd ARG 'ARCH'
    docker_cmd ARG 'MIRROR'
    docker_cmd ARG 'VARIANT'
    docker_cmd ARG 'DEBSCRIPT'
    docker_cmd ARG 'DEBOPTIONS'
    docker_cmd ARG 'INCLUDE'
    docker_cmd

    docker_cmd RUN 'sh -ex /tmp/stage1 && rm -f /tmp/stage1'

    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd FROM 'scratch AS stage2'
    docker_cmd COPY '--from=unpack /opt/chroot /'
    docker_cmd RUN 'sh -ex /tmp/stage2 && rm -f /tmp/stage2'
    docker_cmd
    docker_cmd ARG 'INSTALL'
    docker_cmd RUN 'sh -ex /tmp/stage3 && rm -f /tmp/stage3'
    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd '# Finally remove all the *.deb files.'
    docker_cmd FROM 'scratch'
    docker_cmd COPY '--from=stage2 /tmp/chroot /'
    docker_cmd
    docker_cmd WORKDIR '/root'
    docker_cmd CMD '["bash"]'

    # UTF-8 is a more reasonable default these days but
    # UTF-8 in this way is only supported on wheezy and later.
    # docker_cmd ENV 'LANG=C.UTF-8'
}

################################################################################
# Dockerfile building scriptlets
#
# shellcheck disable=SC1003

docker_cmd() { echo "$@" ; return 0; }
docker_start() { START_LINE=$((BASH_LINENO[0]+1)) ; }
docker_commit() {
    END_LINE=$((BASH_LINENO[0]-1))
    TEXT=$(sed -n < "${BASH_SOURCE[1]}" "${START_LINE},${END_LINE}p")

    echo "$TEXT" | make_docker_runcmd "$1"
    return 0
}

# shellcheck disable=SC1003
make_docker_runcmd() {
    # Encode the script
    local sn="/tmp/install"
    echo "RUN ${1:+: $1 ;}"'set -eu; _() { echo "$@";};(\'
    gzip -cn9 | base64 -w 72 | sed 's/.*/_ &;\\/'
    echo ')|base64 -d|gzip -d>'"$sn;sh -ex $sn;rm -f $sn"
}

docker_save() {
    END_LINE=$((BASH_LINENO[0]-1))
    TEXT=$(sed -n < "${BASH_SOURCE[1]}" "${START_LINE},${END_LINE}p")

    echo "$TEXT" | docker_savefile "$1" "$2"
    return 0
}

# shellcheck disable=SC1003
docker_savefile() {
    # Encode the script
    local sn="${2:-/tmp/install}"
    echo "RUN ${1:+: $1 ;}"'set -eu; _() { echo "$@";};(\'
    gzip -cn9 | base64 -w 72 | sed 's/.*/_ &;\\/'
    echo ")|base64 -d|gzip -d>$sn"
}

main "$@"
