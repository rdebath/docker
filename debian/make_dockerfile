#!/usr/bin/env bash
if [ -z "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi

main() {
    set -e
    if [ "$1" = -b ]
    then make_dockerfile baseonly
    elif [ ".$1." = .-. ]
    then make_dockerfile
    else
	make_dockerfile > "_tmp.doc"
	if cmp -s "_tmp.doc" "${1:-Dockerfile}"
	then rm "_tmp.doc"
	else mv "_tmp.doc" "${1:-Dockerfile}"
	fi
    fi
}

make_dockerfile() {
    if [ "$1" = '' ] ; then
cat <<\@
#--------------------------------------------------------------------------#
# We could use any Linux that has debootstrap available.
# Ideally we want the smallest possible.
# Alpine is very small, but only has a Debian keyring.
# So I use git to fetch some others over https.
#
# Working 'RELEASE' files include the default "stable" and ...
# From Debian:
#   potato woody sarge etch lenny squeeze wheezy
#   jessie stretch buster bullseye unstable
# From Ubuntu:
#   artful bionic breezy cosmic disco eoan focal
#   groovy intrepid jaunty karmic maverick natty
#   oneiric precise quantal raring saucy trusty
#   utopic vivid wily xenial yakkety zesty
# From Devuan:
#   jessie:devuan ascii beowulf chimaera ceres
# From Kali:
#   kali-dev kali-rolling kali-last-snapshot
# From PureOS:
#   amber
#
# The ARCH option can be set to i386 for most of these (and is defaulted to
# i386 for some like Debian Woody)
#
# The MIRROR allows you to set the mirror to use and then
# the DEBSCRIPT arg lets you use a deboostrap script different
# from the RELEASE name ("sid" is the normal fallback).
# The DEBOPTIONS arg allows you to add more options to debootstrap.
#
# The INSTALL arg is a list of packages to install just before the
# final cleanup.
#
# The INCLUDE arg is a list of packages to include during stage 1.
#
# I'm using the base64 stuff to make things prettier :-)

#--------------------------------------------------------------------------#
@
    fi

    docker_cmd FROM 'alpine AS unpack'
    docker_cmd WORKDIR '/root'

    docker_start || {
	apk add --no-cache debootstrap perl git
    } ; docker_commit "Configure host"

    # Note: https://salsa.debian.org/installer-team/debootstrap.git

    docker_start || {
	DIR=/usr/share/debootstrap/scripts

	: 'Repair Debian scripts'
	sed -e '4a default_mirror http://archive.debian.org/debian' \
	    < "$DIR/wheezy" > "$DIR/wheezy.2"
	mv "$DIR/wheezy.2" "$DIR/wheezy"

	: 'Not-revoked Debian key for potato'
	sed -i -e 's@^\(keyring\) .*@\1 /root/potato-key.gpg@' "$DIR/potato"

	: Repair Ubuntu scripts
	for SCRIPT in warty hoary warty.buildd hoary.buildd
	do sed -i -e '4i force_md5' "$DIR/$SCRIPT"
	done
	ln -fs gutsy "$DIR/groovy"
	sed -i -e 's/archive\.ubuntu/old-releases.ubuntu/' "$DIR/dapper"

	: Fix Ubuntu archive keyrings
	sed -i -e 's/^\(keyring\)/#\1 /' "$DIR/gutsy"
	sed -i -e '/default_mirror.*old-releases\.ubuntu/a keyring /usr/share/keyrings/ubuntu-archive-removed-keys.gpg' "$DIR/gutsy"
	sed -i -e '/default_mirror.*archive\.ubuntu/a keyring /usr/share/keyrings/ubuntu-archive-keyring.gpg' "$DIR/gutsy"
	sed -i -e '/default_mirror.*ports\.ubuntu/a keyring /usr/share/keyrings/ubuntu-archive-keyring.gpg' "$DIR/gutsy"

	: Add newer Ubuntu releases
	awk < "$DIR/gutsy" > "$DIR/gutsy.2" \
	'F==1{print;next;}
	 /zesty)/ {
	    print "artful|cosmic|disco|zesty)"
	    print "default_mirror http://old-releases.ubuntu.com/ubuntu"
	    print "keyring /usr/share/keyrings/ubuntu-archive-keyring.gpg"
	    print ";;"
	    F=1; }
	 {print;}'
	mv "$DIR/gutsy.2" "$DIR/gutsy"

	: Ubuntu keys
	git clone \
	    -b ubuntu/devel \
	    https://git.launchpad.net/ubuntu/+source/ubuntu-keyring
	cp -a ubuntu-keyring/keyrings/*.gpg /usr/share/keyrings/.

	: Repair or create the Devuan scripts.
	sed < $DIR/sid > $DIR/devuan \
	    -e 's:^keyring .*:keyring /usr/share/keyrings/devuan-archive-keyring.gpg:' \
	    -e '4i default_mirror http://deb.devuan.org/merged'

	ln -fs devuan $DIR/ascii
	ln -fs devuan $DIR/beowulf
	ln -fs devuan $DIR/chimaera
	ln -fs devuan $DIR/ceres

	: Devuan keys
	git clone https://git.devuan.org/devuan/devuan-keyring.git
	cp -a devuan-keyring/keyrings/*.gpg /usr/share/keyrings/.

	: PureOS script default is HTTPS
	[ -e "$DIR/amber" ] &&
	    grep -q -e '^default_mirror https' "$DIR/amber" &&
		sed -i -e '1i unset DEF_HTTPS_MIRROR' "$DIR/amber"

	: Kali has an https mirror
	[ -e "$DIR/kali" ] &&
	    sed -i -e '1i unset DEF_HTTPS_MIRROR' \
		-e 's@^\(default_mirror\) .*@\1 https://http.kali.org/kali@' \
		"$DIR/kali"

    } ; docker_commit "Configure debootstrap"

    docker_cmd

    docker_start || {
	: "Stage 1 for $RELEASE $ARCH" $STAMP

	DIR=/usr/share/debootstrap/scripts
	case "$RELEASE" in
	potato|woody|sarge ) ARCH="${ARCH:-i386}" ;;

	etch|lenny|squeeze|wheezy )
	    if [ "$ARCH" != i386 ]
	    then
		grep -q vsyscall /proc/$$/maps || {
		    echo >&2 "ERROR: Debian $RELEASE requires the vsyscall memory section."
		    echo >&2 "Add vsyscall=emulate or vsyscall=native to kernel command line."
		    echo >&2 "Alternatively use the i386 architecture."
		    exit 22
		}
	    fi
	    ;;

	warty|hoary|breezy|dapper|edgy|feisty|gutsy|hardy|intrepid|jaunty|karmic )
	    if [ "$ARCH" != i386 ]
	    then
		grep -q vsyscall /proc/$$/maps || {
		    echo >&2 "ERROR: Ubuntu $RELEASE requires the vsyscall memory section."
		    echo >&2 "Add vsyscall=emulate or vsyscall=native to kernel command line."
		    exit 22
		}
	    fi
	    if [ "$ARCH" = i386 ]
	    then
		case "$RELEASE" in
		warty|hoary )
		    [ "$(cat /proc/sys/vm/mmap_min_addr)" -gt 4096 ] && {
			echo >&2 "ERROR: Ubuntu $RELEASE needs /proc/sys/vm/mmap_min_addr"
			echo >&2 "reduced to 4096 on the host and vdso disabled"
			exit 23
		    }
		esac
	    fi
	    ;;

	sarge.buildd|woody.buildd )
	    ARCH="${ARCH:-i386}"
	    DEBSCRIPT="$RELEASE"
	    RELEASE="${RELEASE%.*}"
	    ;;

	warty.buildd|hoary.buildd )
	    DEBSCRIPT="$RELEASE"
	    RELEASE="${RELEASE%.*}:std"
	    ;;

	*:* )
	    [ "$DEBSCRIPT" = '' ] &&
		[ -e "$DIR/${RELEASE##*:}" ] &&
		    DEBSCRIPT="${RELEASE##*:}"

	    [ ! -e "$DIR/${DEBSCRIPT:-${RELEASE%:*}}" ] &&
		ln -fs sid "$DIR/${DEBSCRIPT:-${RELEASE%:*}}"
	    ;;

	* ) # If no such script, guess it's like "sid"
	    [ ! -e "$DIR/${DEBSCRIPT:-${RELEASE%:*}}" ] &&
		ln -fs sid "$DIR/${DEBSCRIPT:-${RELEASE%:*}}"
	    ;;
	esac
	ARCH="${ARCH:-amd64}"

	if grep -q '^keyring.*ubuntu' "$DIR/${DEBSCRIPT:-$RELEASE}"
	then COMP="--components=main,restricted,universe,multiverse"
	else COMP="--components=main,contrib,non-free"
	fi

	grep -q '^variants.*minbase' "$DIR/${DEBSCRIPT:-$RELEASE}" &&
	    VARIANT="--variant=minbase"

	# Must exclude/include to get an undamaged system
	case "$RELEASE" in
	jessie ) EXTRA='--exclude=systemd,systemd-sysv --include=sysvinit-core' ;;
	warty|hoary )
	    EXTRA='--exclude=udev,ubuntu-base'
	    ;;

	dapper )
	    EXTRA='--exclude=udev,initscripts,sysvinit,console-tools,console-common,ubuntu-base'
	    ;;

	gutsy|hardy )
	    EXTRA='--exclude=initscripts,upstart-compat-sysv,system-services'
	    EXTRA="$EXTRA "'--include=gpgv'
	    ;;

	intrepid|jaunty|karmic|lucid|maverick|natty )
	    EXTRA='--include=gpgv'
	    ;;

	ascii|beowulf|chimaera|ceres ) EXTRA='--include=devuan-keyring' ;;
	kali-* ) EXTRA='--include=kali-archive-keyring' ;;
	esac

	debootstrap --foreign --arch=$ARCH $VARIANT $COMP $DEBOPTIONS \
	    $EXTRA ${INCLUDE:+"--include=$INCLUDE"} \
	    "${RELEASE%:*}" chroot "$MIRROR" "$DEBSCRIPT"

	(cd chroot-patch && tar cf - .) | (cd chroot && tar xf - )

	cd /opt/chroot

	: Docker has already setup /proc
	sed -i -e 's/\<setup_proc/: setup_proc/' debootstrap/suite-script

	: Current debootstrap has bug
	sed -i -e 's/echo \${USE_COMPONENTS}/echo "\${USE_COMPONENTS}"/' \
	    debootstrap/functions

	[ "$RELEASE" = jessie ] && {
	    : "Systemd is unpacked ready to install even if we don't want it."
	    : "So break the chroot such that it doesn't actually get installed."
	    sed -i -e '/systemd\>.*/d' debootstrap/required
	}

	echo export RELEASE="'$RELEASE'" > tmp/release

	mv /tmp/stage* tmp

	: "Stage 1 complete for $RELEASE"

    } ; docker_save "Stage 1" /tmp/stage1

    docker_start || {
	: "Start stage 2 for $RELEASE"

	touch /tmp/release
	. /tmp/release
	rm -f /tmp/release

	export DEBIAN_FRONTEND=noninteractive

	: init sometimes uses ischroot to disable updates.
	if [ -x /usr/bin/ischroot ]
	then dpkg-divert --local --rename --add /usr/bin/ischroot
	     ln -s /bin/true /usr/bin/ischroot
	fi

	: This option breaks old versions of dpkg
	dpkg --force-unsafe-io --print-architecture 2>/dev/null &&
	    sed -i -e '/^#<off> force-unsafe-io/s/#[^ ]* //' \
	        /etc/dpkg/dpkg.cfg.d/docker-apt-speedup ||:

	# The script policy-rc.d is used by debootstrap
	mv /usr/sbin/policy-rc.d /usr/sbin/policy-rc.d-docker

	/debootstrap/debootstrap --second-stage ||
	    echo "WARNING: Exit status from debootstrap --second-stage is $?" >&2

	# Install correctly.
	update-alternatives --install /usr/sbin/policy-rc.d policy-rc.d \
	    /usr/sbin/policy-rc.d-docker 50

	case "$RELEASE" in
	jessie )
	    : Systemd leaves a mess, unpack it again so dpkg can remove it.
	    dpkg --unpack --force-depends /var/cache/apt/archives/systemd_*.deb
	    : Sigh this breaks sysvinit ...
	    dpkg --unpack --force-depends /var/cache/apt/archives/systemd-sysv_*.deb
	    : Remove them
	    dpkg --purge --force-depends systemd ||:
	    dpkg --purge --force-depends systemd-sysv ||:
	    : Oh, and fix sysvinit
	    dpkg -i /var/cache/apt/archives/sysvinit-core_*.deb

	    : Remove packages that are not essential and check
	    (
		ulimit -n 1024 ||: Docker gives us 1M fds, apt cries.
		apt-mark auto -qq $(apt-mark showmanual)
		apt-get autoremove --purge -y
		apt-get update -y
		apt-get dist-upgrade -y
	    )
	    ;;

	warty ) # Warty isn't a minbase
	    dpkg --purge \
		alsa-utils alsa-base libasound2 \
		lvm10 lvm2 lvm-common hotplug \
		modutils pciutils module-init-tools
	    dpkg --purge \
		aptitude at base-config bind9-host bsdmainutils \
		console-common console-data console-tools cron discover1 \
		discover1-data dnsutils evms evms-ncurses ftp gettext-base \
		groff-base iproute iputils-arping iputils-tracepath klogd \
		libasound2 libatm1 libconsole libdiscover1 libdns16 \
		libevms-2.3 libgc1 libgdbm3 libgpmg1 libidn11 libisc7 \
		liblockfile1 liblwres1 libncursesw5 libpcap0.7 libpcap0.8 \
		libreadline4 libsigc++-1.2-5c102 libusb-0.1-4 logrotate \
		lshw lsof ltrace mailx man-db manpages mdadm mime-support \
		mtr-tiny mutt nano netcat ntp ntpdate openssh-client \
		parted popularity-contest postfix postfix-tls ppp \
		pppconfig pppoeconf python python2.3 reiser4progs \
		reportbug rsync strace sudo sysklogd tcpdump telnet \
		usbutils vim vim-common w3m xfsprogs
	    ;;

	dapper|edgy|feisty )
	    : Some packages cannot be configured.
	    dpkg --purge --force-remove-essential \
		$(dpkg -l | awk '/^i[UF]/{print $2;}')
	    ;;

	potato )
	    # Potato isn't a minbase, but apt and netbase aren't "essential"!
	    yes yes |
	    dpkg --purge --force-remove-essential \
		pcmcia-cs modconf modutils pppconfig ppp console-tools

	    for pkg in \
		adduser ae base-config console-data console-tools-libs \
		elvis-tiny fbset fdflush fdutils ftp gettext-base \
		isapnptools libreadline4 lilo locales makedev mbr \
		pciutils pump setserial sysklogd syslinux tasksel \
		telnet xviddetect

	    do  dpkg --purge "$pkg"
	    done
	    # Allow sysvinit to be reinstalled, but disable restart.
	    ln -s /bin/true /usr/local/sbin/init
	    ;;
	esac

	dpkg --configure --pending
	dpkg -l dpkg apt base-files

	[ -f /usr/bin/apt-mark ] && [ "$RELEASE" != jessie ] && {
	    apt-mark auto -qq $(apt-mark showmanual) ||:
	}

	# Workaround for Jessie apt-get is very slow issue
	[ "$RELEASE" = jessie ] &&
	    echo >>/root/.bashrc ulimit -n 1024

	: "Stage 2 complete for $RELEASE"
    } ; docker_save "Stage 2" /tmp/stage2

    docker_start || {
	# Download and install any defined packages
	[ "$INSTALL" != '' ] && {
	    apt-get update -y
	    apt-get install -y $INSTALL
	}

	: "Clean lists, cache and history."
	apt-get update -qq --list-cleanup -oDir::Etc::SourceList=/dev/null
	apt-get clean
	dpkg --clear-avail
	rm -f /etc/apt/apt.conf.d/01autoremove-kernels
	rm -f /var/lib/dpkg/*-old
	rm -rf /var/tmp/* /tmp/*
	:|find /var/log -type f ! -exec tee {} \;

	# Label
	[ -e /etc/debian_chroot ] || echo docker > /etc/debian_chroot

	# Workaround for old "dpkg --clear-avail" bug.
	[ ! -x /usr/bin/dselect ] || echo >> /var/lib/dpkg/available

    } ; docker_save "Extras and Cleanup" /tmp/stage3

    docker_cmd
    docker_savefile 'Debian Potato key' /root/potato-key.gpg < potato-key.gpg

    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd '# Patch apt and dpkg for docker'
    docker_cmd '# Note: standard used "#" for comment not "//"'
    docker_cmd WORKDIR '/opt/chroot-patch'
    base64_extras

    docker_cmd
    docker_cmd WORKDIR '/opt'
    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd

    [ "$1" = baseonly ] && return 0

    docker_cmd ARG 'RELEASE=stable'
    docker_cmd ARG 'ARCH'
    docker_cmd ARG 'MIRROR'
    docker_cmd ARG 'DEBSCRIPT'
    docker_cmd ARG 'DEBOPTIONS'
    docker_cmd ARG 'INCLUDE'
    docker_cmd

    docker_cmd RUN 'sh -ex /tmp/stage1 && rm -f /tmp/stage1'

    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd FROM 'scratch AS stage2'
    docker_cmd COPY '--from=unpack /opt/chroot /'
    docker_cmd RUN 'sh -ex /tmp/stage2 && rm -f /tmp/stage2'
    docker_cmd
    docker_cmd ARG 'INSTALL'
    docker_cmd RUN 'sh -ex /tmp/stage3 && rm -f /tmp/stage3'
    docker_cmd
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd '# Finally remove all the *.deb files.'
    docker_cmd FROM 'scratch'
    docker_cmd COPY '--from=stage2 / /'
    docker_cmd
    docker_cmd WORKDIR '/root'
    docker_cmd '# UTF-8 is a more reasonable default these days.'
    docker_cmd ENV 'LANG=C.UTF-8'
    docker_cmd CMD '["bash"]'
}

################################################################################
# Dockerfile building scriptlets
#
base64_extras() {

    tar c \
	--owner=root --group=root \
	--mode=og=u-w,ug-s \
	--sort=name \
	--mtime="$(date +%Y)-01-01 12:00:00" \
	-f - -- etc usr |
    {
	echo 'RUN set -eu; _() { echo "$@";};(\'
	gzip -n9 | base64 -w 72 | sed 's/.*/_ &;\\/'
	echo ')|base64 -d|gzip -d|tar xf -'
    }
}

docker_cmd() { echo "$@" ; return 0; }
docker_start() { START_LINE=$((BASH_LINENO[0]+1)) ; }
docker_commit() {
    END_LINE=$((BASH_LINENO[0]-1))
    TEXT=$(sed -n < "${BASH_SOURCE[1]}" "${START_LINE},${END_LINE}p")

    echo "$TEXT" | make_docker_runcmd "$1"
    return 0
}

make_docker_runcmd() {
    # Encode the script
    local sn="/tmp/install"
    echo "RUN ${1:+: $1 ;}"'set -eu; _() { echo "$@";};(\'
    gzip -cn9 | base64 -w 72 | sed 's/.*/_ &;\\/'
    echo ')|base64 -d|gzip -d>'"$sn;sh -ex $sn;rm -f $sn"
}

docker_save() {
    END_LINE=$((BASH_LINENO[0]-1))
    TEXT=$(sed -n < "${BASH_SOURCE[1]}" "${START_LINE},${END_LINE}p")

    echo "$TEXT" | docker_savefile "$1" "$2"
    return 0
}

docker_savefile() {
    # Encode the script
    local sn="${2:-/tmp/install}"
    echo "RUN ${1:+: $1 ;}"'set -eu; _() { echo "$@";};(\'
    gzip -cn9 | base64 -w 72 | sed 's/.*/_ &;\\/'
    echo ")|base64 -d|gzip -d>$sn"
}

main "$@"
