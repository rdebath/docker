#!/usr/bin/env bash
if [ -z "$BASH_VERSION" ];then exec bash "$0" "$@";else set +o posix;fi

main() {
    if [ "$#" -gt 0 ]
    then make_dockerfile "$@"
    else default_list
    fi
}

default_list() {
    BASE=Docker.d/Dockerfile
    rm -rf Docker.d
    mkdir -p Docker.d
    make_dockerfile > "$BASE.minbase"
}

make_dockerfile() {

cat <<\@
#--------------------------------------------------------------------------#
# We can use any Linux that has debootstrap as a package.
# Ideally we want the smallest that has up to date
# repository keys for our final target
#
# Alpine is very small, but only has a Debian keyring.
# So use git to fetch some others over https if needed.
@
    docker_cmd 'FROM alpine AS unpack'
    docker_cmd 'WORKDIR /root'

    docker_start || {
	set -ex

	apk add --no-cache debootstrap perl git

	DIR=/usr/share/debootstrap/scripts

	: Repair or create the Devuan scripts.
	sed < $DIR/sid \
		> $DIR/devuan \
	    -e 's:^keyring .*:keyring /usr/share/keyrings/devuan-archive-keyring.gpg:' \
	    -e '4i default_mirror http://deb.devuan.org/merged'

	ln -fs devuan $DIR/ascii
	ln -fs devuan $DIR/beowulf
	ln -fs devuan $DIR/chimaera
	ln -fs devuan $DIR/ceres

	: PureOS script default is HTTPS
	[ -e "$DIR/amber" ] &&
	    grep -q -e '^default_mirror https' "$DIR/amber" &&
		sed -i -e '1i unset DEF_HTTPS_MIRROR' "$DIR/amber"

	: Repair Ubuntu scripts
	sed -i -e '4i force_md5' "$DIR/warty"
	sed -i -e '4i force_md5' "$DIR/hoary"

	: Ubuntu
	git clone \
	    -b ubuntu/devel \
	    https://git.launchpad.net/ubuntu/+source/ubuntu-keyring
	cp -a ubuntu-keyring/keyrings/*.gpg /usr/share/keyrings/.

	: Devuan
	git clone https://git.devuan.org/devuan/devuan-keyring.git
	cp -a devuan-keyring/keyrings/*.gpg /usr/share/keyrings/.

	apk del git

    } ; docker_commit "Configure host"

    docker_cmd 'WORKDIR /opt'
    docker_cmd "ARG RELEASE=stable"
    docker_cmd "ARG ARCH"
    docker_cmd "ARG MIRROR"
    docker_cmd "ARG DEBSCRIPT"
    docker_cmd "ARG DEBOPTIONS"

    docker_start || {
	set -ex
	: "Stage 1 for $RELEASE $ARCH"

	DIR=/usr/share/debootstrap/scripts
	[ "$RELEASE" = potato ] && ARCH="${ARCH:-i386}"
	[ "$RELEASE" = woody ] && ARCH="${ARCH:-i386}"
	[ "$RELEASE" = sarge ] && ARCH="${ARCH:-i386}"
	[ "$RELEASE" = devuan ] && {
	    DEBSCRIPT="$RELEASE";
	    RELEASE=stable
	    MIRROR="${MIRROR:-http://deb.devuan.org/merged}"
	}
	ARCH="${ARCH:-amd64}"

	if grep -q ^keyring.*ubuntu "$DIR/${DEBSCRIPT:-$RELEASE}"
	then COMP="--components=main,restricted,universe,multiverse"
	else COMP="--components=main,contrib,non-free"
	fi

	grep -q ^variants.*minbase "$DIR/${DEBSCRIPT:-$RELEASE}" &&
	    VARIANT="--variant=minbase"

	[ "$RELEASE" = jessie ] &&
	    EXTRA='--exclude=systemd,systemd-sysv --include=sysvinit-core'

	debootstrap --foreign --arch=$ARCH $VARIANT $COMP $DEBOPTIONS \
	    $EXTRA "$RELEASE" chroot $MIRROR $DEBSCRIPT

	cd /opt/chroot

	: Docker has already setup /proc
	sed -i -e 's/  setup_proc/#setup_proc/' debootstrap/suite-script

	[ "$RELEASE" = potato ] && {
	    # Current debootstrap has bug
	    sed -i -e 's/echo \${USE_COMPONENTS}/echo "\${USE_COMPONENTS}"/' debootstrap/functions
	}

	[ "$RELEASE" = jessie ] && {
	    : "Systemd is unpacked ready to install even if we don't want it."
	    : "So break the chroot such that it doesn't actually get installed."
	    sed -i -e '/systemd\>.*/d' debootstrap/required
	}
	: Stage 1 complete for $RELEASE

    } ; docker_commit "Stage 1"

    docker_cmd '# Configure apt and dpkg for docker'
    docker_cmd '# Note: standard used "#" for comment not "//"'
    docker_cmd 'WORKDIR /opt/chroot'
    base64_extras

    docker_cmd '#--------------------------------------------------------------------------#'

    docker_start || {
	set -ex
	export DEBIAN_FRONTEND=noninteractive

	: init sometimes uses ischroot to disable updates.
	if [ -x /sbin/init -a -x /usr/bin/ischroot ]
	then dpkg-divert --local --rename --add /usr/bin/ischroot
	     ln -s /bin/true /usr/bin/ischroot
	fi

	: This option breaks some installs eg: ubuntu/maverick
	dpkg --force-unsafe-io -l dpkg >/dev/null 2>&1 &&
	    sed -i -e '/^#<off> force-unsafe-io/s/#[^ ]* //' \
	        /etc/dpkg/dpkg.cfg.d/docker-apt-speedup ||:

	/debootstrap/debootstrap --second-stage ||
	    echo "WARNING: Exit status from debootstrap --second-stage is $?" >&2

	if [ "$RELEASE" = jessie ]
	then
	    : Systemd leaves a mess, unpack it again so dpkg can remove it.
	    dpkg --unpack --force-depends /var/cache/apt/archives/systemd_*.deb
	    : Sigh this breaks sysvinit ...
	    dpkg --unpack --force-depends /var/cache/apt/archives/systemd-sysv_*.deb
	    : Remove them
	    dpkg --purge --force-depends systemd ||:
	    dpkg --purge --force-depends systemd-sysv ||:
	    : Oh, and fix sysvinit
	    dpkg -i /var/cache/apt/archives/sysvinit-core_*.deb

	    : Remove packages that are not essential and check
	    apt-mark auto -qq $(apt-mark showmanual)
	    apt-get autoremove --purge -y
	    apt-get update -y
	    apt-get dist-upgrade -y
	fi

	dpkg --configure --pending
	dpkg -l dpkg apt base-files

	[ -f /usr/bin/apt-mark ] && [ "$RELEASE" != jessie ] && {
	    apt-mark auto -qq $(apt-mark showmanual) ||:
	}

	: Clean up the ischroot divert.
	if [ -x /sbin/init -a -x /usr/bin/ischroot ]
	then
	    rm -f /usr/bin/ischroot
	    dpkg-divert --local --rename --remove /usr/bin/ischroot
	fi

	: Clean lists, cache and history.
	apt-get update -qq --list-cleanup -oDir::Etc::SourceList=/dev/null
	apt-get clean
	dpkg --clear-avail
	rm -f /etc/apt/apt.conf.d/01autoremove-kernels
	rm -f /var/lib/dpkg/*-old
	rm -rf /var/tmp/* /tmp/*
	:|find /var/log -type f ! -exec tee {} \;
	[ ! -x /usr/bin/dselect ] || dselect update
	: Stage 2 complete for $RELEASE
    } ; docker_save "Stage 2" tmp/stage2

    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd 'FROM scratch AS stage2'
    docker_cmd 'COPY --from=unpack /opt/chroot /'
    docker_cmd 'ARG RELEASE'
    docker_cmd 'RUN set -ex;: $RELEASE; sh /tmp/stage2 && rm -f /tmp/stage2'
    docker_cmd '#--------------------------------------------------------------------------#'
    docker_cmd '# Finally squash all the layers.'
    docker_cmd 'FROM scratch'
    docker_cmd 'COPY --from=stage2 / /'
    docker_cmd 'WORKDIR /root'
    docker_cmd 'CMD ["bash"]'
}

base64_extras() {

    tar c \
	--owner=root --group=root \
	--mode=og=u-w,ug-s \
	--mtime=/etc/os-release \
	-f - -- etc usr |
    {
	echo 'RUN set -eu; _() { echo "$@";};(\'
	gzip -n9 | base64 -w 72 | sed 's/.*/_ &;\\/'
	echo ')|base64 -d|gzip -d|tar xvf -'
    }
}

################################################################################
# Dockerfile building scriptlets
#
docker_cmd() { echo "$@" ; return 0; }
docker_start() { START_LINE=$((BASH_LINENO[0]+1)) ; }
docker_commit() {
    END_LINE=$((BASH_LINENO[0]-1))
    TEXT=$(sed -n < "${BASH_SOURCE[1]}" "${START_LINE},${END_LINE}p")

    echo
    echo "$TEXT" | make_docker_runcmd "$1"
    echo
    return 0
}

make_docker_runcmd() {
    # Encode the script
    local sn="/tmp/install"
    echo "RUN ${1:+: $1 ;}"'set -eu; _() { echo "$@";};(\'
    gzip -cn9 | base64 -w 72 | sed 's/.*/_ &;\\/'
    echo ')|base64 -d|gzip -d>'"$sn;sh $sn;rm -f $sn"
}

docker_save() {
    END_LINE=$((BASH_LINENO[0]-1))
    TEXT=$(sed -n < "${BASH_SOURCE[1]}" "${START_LINE},${END_LINE}p")

    echo
    echo "$TEXT" | make_docker_savescript "$1" "$2"
    echo
    return 0
}

make_docker_savescript() {
    # Encode the script
    local sn="${2:-/tmp/install}"
    echo "RUN ${1:+: $1 ;}"'set -eu; _() { echo "$@";};(\'
    gzip -cn9 | base64 -w 72 | sed 's/.*/_ &;\\/'
    echo ")|base64 -d|gzip -d>$sn"
}

main "$@"
