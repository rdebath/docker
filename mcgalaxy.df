# Todo?:
#   Lets Encrypt certificates. (Also private CA certificates ?)
#   ? ssh daemon to use screen from?
#   Name validation (authentication server)

# TODO:
#   Add linux cc.debian.buster.out

ARG FROM=debian:buster

################################################################################
# This is the basic build machine.
FROM $FROM AS deb_build
RUN apt-get update && \
    apt-get upgrade -y --no-install-recommends && \
    apt-get install -y --no-install-recommends \
	wget curl ca-certificates \
	binutils git unzip zip build-essential \
	imagemagick pngcrush p7zip-full \
	gcc-mingw-w64-x86-64 gcc-mingw-w64-i686

################################################################################
# I copy the context into a VM so that I can create directories and stop
# it failing when they don't exist in the context.
FROM deb_build AS context
WORKDIR /opt/mcgalaxy
# Do this first, it can be overwritten if it exists in the context.
RUN [ -f default.zip ] || \
    wget --progress=dot:mega -O default.zip \
        https://static.classicube.net/default.zip

# Recompress the png files ... hard.
BEGIN
    mkdir /tmp/default
    cd /tmp/default
    unzip -jq /opt/mcgalaxy/default.zip
    for i in *.png
    do
	convert "$i" tmp_1.png
	pngcrush -brute tmp_1.png tmp_2.png
	[ -s tmp_1.png ] && mv tmp_1.png "$i"
	rm -f tmp_1.png tmp_2.png
    done

    mkdir mob
    for f in skinnedcube.png \
	    chicken.png creeper.png pig.png pony.png sheep.png \
	    sheep_fur.png skeleton.png spider.png zombie.png
    do  [ -f "$f" ] || continue
	mv "$f" mob/.
    done

    mkdir gui
    for f in gui.png gui_classic.png default.png icons.png touch.png
    do  [ -f "$f" ] || continue
	mv "$f" gui/.
    done

    mkdir env
    for f in particles.png rain.png snow.png clouds.png
    do  [ -f "$f" ] || continue
	mv "$f" env/.
    done

    7z -tzip -mx9 a default-7z.zip -r '*.*'
    mv default-7z.zip /opt/mcgalaxy/default.zip
COMMIT

# Make sure the directories we need exist here, overwrite them by the ones
# in the context if they exist.
RUN mkdir -p MCGalaxy ClassiCube
COPY . .

################################################################################
FROM deb_build AS mcgalaxysrc

# GITREPO will be pulled if the context doesn't contain "MCGalaxy.sln"
# If GITREPO is empty too binaries will be downloaded at runtime.
ARG GITREPO=https://github.com/UnknownShadow200/MCGalaxy.git
ADD --chown=1000:1000 https://github.com/UnknownShadow200/MCGalaxy/commits/master.atom .
WORKDIR /opt/mcgalaxy/MCGalaxy

# Check if we got source from the context, if not, download it.
COPY --from=context /opt/mcgalaxy/MCGalaxy .

WORKDIR /opt/mcgalaxy
BEGIN
[ -d MCGalaxy -a ! -e MCGalaxy/MCGalaxy.sln ] && {
    # Remove directory if (mostly) empty
    [ -f MCGalaxy/Dockerfile ] && mv MCGalaxy/Dockerfile .
    rm -rf MCGalaxy 2>/dev/null ||:
    mkdir MCGalaxy
}

[ ! -e MCGalaxy/MCGalaxy.sln -a ".$GITREPO" != '.' ] && {
    git clone --depth 1 "$GITREPO" MCGalaxy
}
:
COMMIT

################################################################################
FROM deb_build AS classicube
# Download ClassiCube if there's no source in the context.
WORKDIR /opt/mcgalaxy/ClassiCube
COPY --from=context /opt/mcgalaxy/ClassiCube .
RUN [ -d src ] || \
    git clone --depth=1 https://github.com/UnknownShadow200/ClassiCube.git .

################################################################################
FROM emscripten/emsdk AS webclient
# Using a different VM to build the web version of classicube.
COPY --from=classicube /opt/mcgalaxy/ClassiCube .
COPY --from=context /opt/mcgalaxy/default.zip texpacks/default.zip

################################################################################
BEGIN
set -x
LATEST=$(git rev-parse --short HEAD || cat .git-latest)
LATEST="${LATEST:+-DCC_COMMIT_SHA=\"$LATEST\"}"

[ -f src/interop_web.js ] && JLIB='--js-library src/interop_web.js'
emcc \
    src/*.c \
    -w -O1 \
    -o cc.js \
    $JLIB \
    "$LATEST" \
    -s WASM=1 \
    -s LEGACY_VM_SUPPORT=1 \
    -s ALLOW_MEMORY_GROWTH=1 \
    -s ABORTING_MALLOC=0 \
    -s ERROR_ON_UNDEFINED_SYMBOLS=1 \
    --preload-file texpacks/default.zip

#-------------------------------------------------------------------------------
# fix mouse wheel scrolling page not being properly prevented
# "[Intervention] Unable to preventDefault inside passive event listener
# due to target being treated as passive."
[ -f cc.js ] && {
    echo >&2 Patching cc.js ...
    cp -p cc.js cc.js.orig
    sed -i 's#eventHandler.useCapture);#{ useCapture: eventHandler.useCapture, passive: false });#g' cc.js

    diff -u cc.js.orig cc.js ||:
    rm -f cc.js.orig ||:
}

:
#-------------------------------------------------------------------------------
# Notes
# -g4 -> C source shown in browser.
# -s WASM=1 \	-- "WebAssembly" is undefined on slow browser (IE).
# -s SINGLE_FILE=1 \
#
#  -ldylink.js -lbrowser.js
# Also see misc/buildbot.sh
COMMIT

################################################################################
FROM deb_build AS windowsclient
# The build VM has windows cross compilers.
ENV ROOT_DIR=/opt/classicube
WORKDIR $ROOT_DIR
COPY --from=classicube /opt/mcgalaxy/ClassiCube .

################################################################################
BEGIN
WIN32_CC="i686-w64-mingw32-gcc"
WIN64_CC="x86_64-w64-mingw32-gcc"
WIN32_FLAGS="-mwindows -nostartfiles -Wl,-e_main_real -DCC_NOMAIN"
WIN64_FLAGS="-mwindows -nostartfiles -Wl,-emain_real -DCC_NOMAIN"
ALL_FLAGS="-O1 -s -fno-stack-protector -fno-math-errno -Qn -w"

build_win32() {
  echo "Building win32.."
  cp $ROOT_DIR/misc/CCicon_32.res $ROOT_DIR/src/CCicon_32.res

  EXE=ClassiCube.exe
  rm -f "$EXE" ||:
  $WIN32_CC *.c $ALL_FLAGS $WIN32_FLAGS -o "$EXE" CCicon_32.res -DCC_COMMIT_SHA=\"$LATEST\" -lws2_32 -lwininet -lwinmm -limagehlp -lcrypt32

  echo "Building win32 OpenGL.."
  EXE=ClassiCube.opengl.exe
  rm -f "$EXE" ||:
  $WIN32_CC *.c $ALL_FLAGS $WIN32_FLAGS -o "$EXE" CCicon_32.res -DCC_COMMIT_SHA=\"$LATEST\" -DCC_BUILD_MANUAL -DCC_BUILD_WIN -DCC_BUILD_GL -DCC_BUILD_WINGUI -DCC_BUILD_WGL -DCC_BUILD_WINMM -DCC_BUILD_WININET -lws2_32 -lwininet -lwinmm -limagehlp -lcrypt32 -lopengl32

}

build_win64() {
  echo "Building win64.."
  cp $ROOT_DIR/misc/CCicon_64.res $ROOT_DIR/src/CCicon_64.res
  
  EXE=ClassiCube.64.exe
  rm -f "$EXE" ||:
  $WIN64_CC *.c $ALL_FLAGS $WIN64_FLAGS -o "$EXE" CCicon_64.res -DCC_COMMIT_SHA=\"$LATEST\" -lws2_32 -lwininet -lwinmm -limagehlp -lcrypt32

  echo "Building win64 OpenGL.."
  EXE=ClassiCube.64-opengl.exe
  rm -f "$EXE" ||:
  $WIN64_CC *.c $ALL_FLAGS $WIN64_FLAGS -o "$EXE" CCicon_64.res -DCC_COMMIT_SHA=\"$LATEST\" -DCC_BUILD_MANUAL -DCC_BUILD_WIN -DCC_BUILD_GL -DCC_BUILD_WINGUI -DCC_BUILD_WGL -DCC_BUILD_WINMM -DCC_BUILD_WININET -lws2_32 -lwininet -lwinmm -limagehlp -lcrypt32 -lopengl32

}

if [ -d .git ]
then LATEST=$(git rev-parse --short HEAD || cat .git-latest || echo unknown)
else LATEST=$(cat .git-latest || echo unknown)
fi
cd $ROOT_DIR/src

build_win32
build_win64

COMMIT

################################################################################
FROM $FROM
# The mono run time VM includes sufficient to compile MCGalaxy, so do it there.
# I don't want to reduce it too far as plugins will need to be compiled at
# run time.

# Choose a Mono version from mono-project.com, "-" means current.
# If you blank this out you'll get "mono-devel" from Debian (5.18 in Buster).
# If $FROM already contains /usr/bin/mono, this has no effect.
ARG MONO_VERSION=

# Useful commands.
# docker run --name=mcgalaxy --rm -it -p 25565:25565 -v "$(pwd)/mcgalaxy":/home/user mcgalaxy
# docker run --name=mcgalaxy --rm -d -p 25565:25565 -v mcgalaxy:/home/user mcgalaxy
#
# If you use "-it" mcgalaxy will run on the virtual console, for "-d" a copy
# of "screen" will be started to show recent messages.
# The /home/user directory will be mcgalaxy's current directory.
# MCGalaxy will run as user id 1000. (ARG UID)
# The startup script ensures that /restart works and uses "rlwrap" for history.
#
# Ctrl-P Ctrl-Q
# docker attach mcgalaxy
#
# docker exec -it mcgalaxy bash
# docker exec -it mcgalaxy screen -D -r  # Ctrl-a d to detach
# docker exec -it -u 0 mcgalaxy bash
# docker logs mcgalaxy

#TXT# SHELL ["/bin/bash", "-c"]

################################################################################
BEGIN
export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=Shut_the_fuck_up
set -x
set_packages() {
    PKGS="unzip wget curl sqlite3 mini-httpd rlwrap screen ca-certificates"
    # If mono is already installed use that version
    [ -x /usr/bin/mono ] && return

    PKGS="$PKGS mono-devel"

    if [ "$MONO_VERSION" != '' ]
    then
	# Beware: Mono repo key.
	fetch_apt_key 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF

	# Add some more packages -- mono:latest non-slim version
	# PKGS="$PKGS binutils ca-certificates-mono fsharp mono-vbnc"
	# PKGS="$PKGS nuget referenceassemblies-pcl"

	# Recommended
	# PKGS="$PKGS libmono-btls-interface4.0-cil cli-common"
	# PKGS="$PKGS krb5-locales binfmt-support mono-llvm-support"

	DEBBASE=buster
	case "$MONO_VERSION" in
	[34].* ) DEBBASE=stable ;;
	5.* ) DEBBASE=stretch ;;
	6.8|6.8.*|6.4|6.4.* )
	    # LLVM AOT works!
	    PKGS="$PKGS mono-llvm-support" ;;
	esac

	if [ "$MONO_VERSION" = '' -o ".$MONO_VERSION" = '.-' ]
	then
	    echo "deb http://download.mono-project.com/repo/debian" \
		 "$DEBBASE main" \
		>> /etc/apt/sources.list
	else
	    echo "deb http://download.mono-project.com/repo/debian" \
		 "$DEBBASE/snapshots/$MONO_VERSION main" \
		>> /etc/apt/sources.list
	fi
    fi
}

fetch_apt_key() {
    apt-get update
    apt-get install -y --no-install-recommends gnupg
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$1"
    apt-get purge -y --auto-remove gnupg
}

deb_cleanup(){
    apt-get update -qq --list-cleanup -oDir::Etc::SourceList=/dev/null
    apt-get clean
    dpkg --clear-avail
    rm -f /etc/apt/apt.conf.d/01autoremove-kernels
    rm -f /var/lib/dpkg/*-old
    rm -rf /var/tmp/* /tmp/*
    :|find /var/log -type f ! -exec tee {} \;
    exit 0
}

set_packages
apt-get update
apt-get upgrade -y --no-install-recommends
apt-get install -y --no-install-recommends $PKGS
deb_cleanup
COMMIT
################################################################################

# Do compile and run of application as "user"
ARG UID=1000
RUN U=user ; useradd $U -u $UID -d /home/$U -m
WORKDIR /opt/mcgalaxy
COPY --from=mcgalaxysrc --chown=user:user /opt/mcgalaxy/MCGalaxy /opt/mcgalaxy/MCGalaxy
RUN chown user:user .
USER user

################################################################################
# Create the build.sh script
BEGIN build.sh 'chmod +x build.sh'
#!/bin/sh
set -e
O=/opt/mcgalaxy
cd "$O"
[ -e MCGalaxy/MCGalaxy.sln ] || {
    echo 'Nothing found to build, will download binaries at runtime' >&2
    exit 0
}

cd MCGalaxy

# Patch server to allow it to follow best practices.
#   http://www.mono-project.com/docs/getting-started/application-deployment
sed -i '/\<CurrentDirectory\>.*=.*\<GetExecutingAssembly\>/s/^/\/\/PATCH/' \
    CLI/Program.cs
sed -i '/CheckFile.*dll"/s/^/\/\/PATCH/' \
    MCGalaxy/Server/Server.cs
sed -i '/"MCGalaxy_.dll");/s::Assembly.GetExecutingAssembly().Location); //PATCH:' \
    MCGalaxy/Scripting/Scripting.cs

case "$COMPILE_FLAGS" in
*TEN_BIT_BLOCKS* )
    echo >&2 "Using compile flags $COMPILE_FLAGS"
    sed -i '/Activity, "Starting Server/s:Server":Server (TEN_BIT_BLOCKS)" /*//PATCH*/:' \
	MCGalaxy/Server/Server.cs
    ;;
esac

echo >&2 Patches applied ...
grep //PATCH >&2 \
    CLI/Program.cs \
    MCGalaxy/Server/Server.cs \
    MCGalaxy/Scripting/Scripting.cs

REL=/p:Configuration=Release
BINDIR=Release
#REL=
#BINDIR=Debug
if [ ! -x "/usr/bin/msbuild" -a -x "/usr/bin/xbuild" ]
then echo >&2 Warning: msbuild is missing, using xbuild.
     xbuild $REL ${COMPILE_FLAGS:+"/p:DefineConstants=$COMPILE_FLAGS"}
else msbuild $REL ${COMPILE_FLAGS:+"/p:DefineConstants=\"$COMPILE_FLAGS\""}
fi

# LLVM AOT compile should run faster.
#
# LLVM seems to be often be broken. (Not included on Debian)
# Error messages are consistent with LLVM moving the goalposts.
# LLVM works on Mono 6.4, 6.8
# 6.0 -- Mono Warning: llvm support could not be loaded.
# 6.10, 6.12 -- llc: Unknown command line argument '-disable-fault-maps'.
#
# Not used: MCGalaxy.exe MySql.Data.dll
# Fails to compile: LibNoise.dll
#
[ -x /usr/lib/mono/llvm/bin/opt ] && (
    echo >&2 "Checking LLVM AOT compile $MONO_VERSION"
    RV=0
    P="$(pwd)"
    cd /tmp
    cat > hello.cs <<\!
// Hello World! program
namespace HelloWorld
{
    class Hello {
	static void Main(string[] args)
	{
	    System.Console.WriteLine("Hello World!");
	}
    }
}
!
    AOT="--aot=mcpu=generic"
    mcs hello.cs && {
	mono "$AOT" --llvm -O=all,-shared hello.exe || {
	    AOT=--aot
	    mono "$AOT" --llvm -O=all,-shared hello.exe
	} || RV=1
    } || RV=1

    rm -rf /tmp/hello.* /tmp/mono_aot_* ||:

    if [ "$RV" = 0 ]
    then
	cd "$P"
	echo >&2 "Attempting LLVM AOT compile with $AOT"
	cd "bin/$BINDIR"
	for DLL in MCGalaxyCLI.exe MCGalaxy_.dll
	do mono "$AOT" --llvm -O=all,-shared $DLL ||:
	done
    else
	echo >&2 "WARNING: Skipping LLVM AOT compile, it looks broken."
    fi

) ||:

for f in \
    LICENSE.txt Changelog.txt \
    MCGalaxy.exe MCGalaxy.exe.config \
    MCGalaxyCLI.exe MCGalaxyCLI.exe.config \
    MCGalaxyCLI.exe.so MCGalaxy_.dll.so \
    MCGalaxy_.dll MCGalaxy_.dll.config \
    MySql.Data.dll Newtonsoft.Json.dll \
    sqlite3_x32.dll sqlite3_x64.dll \
    System.Data.SQLite.dll \
    Updater.exe Updater.exe.config

do [ -e "bin/$BINDIR/$f" ] && { FILES="$FILES bin/$BINDIR/$f" ; continue ; }
   [ -e "$f" ] && { FILES="$FILES $f" ; continue ; }
   case "$f" in
   *.config )
	# These are missing from git repo.
	cat > "bin/$f" <<-\@
	<?xml version="1.0" encoding="utf-8"?>
	<configuration>
	  <startup>
	    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/>
	  </startup>
	  <runtime>
	    <gcAllowVeryLargeObjects enabled="true"/>
	  </runtime>
	</configuration>
@
	FILES="$FILES bin/$f"
    ;;
    MCGalaxyCLI.exe|*.dll )
	echo >&2 "ERROR: Can't find file $f for zip"
	exit 1
	;;
    * ) echo >&2 "WARNING: Can't find file $f for zip" ;;

    # TODO? For MySql.Data.dll sqlite3_x32.dll sqlite3_x64.dll
    # 	    From MCGalaxy/MCGalaxy/Server/Maintenance/Updater.cs:
    # public const string BaseURL    = "https://raw.githubusercontent.com/UnknownShadow200/MCGalaxy/master/";

    esac
done

mkdir -p "$O"/lib
cp -a $FILES "$O"/lib
cd "$O"

rm -rf ~/.mono ~/.cache MCGalaxy
:
COMMIT
################################################################################

# For >255 custom blocks use: ARG COMPILE_FLAGS=TEN_BIT_BLOCKS
ARG COMPILE_FLAGS=

# Build the mcgalaxy_bin.zip from the git repo (or context).
RUN ./build.sh

################################################################################
# Create the start_mcgalaxy script.
BEGIN start_mcgalaxy 'chmod +x start_mcgalaxy'
#!/bin/sh
set -e
O=/opt/mcgalaxy
# No term; use screen to fake one.
[ "$TERM" = '' ] && {
    echo Starting inside screen.
    [ -x /bin/bash ] && export SHELL=/bin/bash
    exec screen -D -m "$O"/start_mcgalaxy
}

export PREFIX="$(pwd)"
DATA="$(pwd)"

# If it's installed to "$O"/lib use that directly.
# Otherwise download the binaries
if [ -f "$O"/lib/MCGalaxyCLI.exe ]
then export PREFIX="$O/lib"
    [ -f "$O"/lib/MCGalaxy_.dll.so ] &&
	echo Running AOT compiled version.
else
    REPO=UnknownShadow200/MCGalaxy
    GH2=https://raw.githubusercontent.com
    GH1=https://github.com
    [ "$MC_VER" = '' ] &&
	MC_VER=$(curl -Ss $GH2/$REPO/master/Uploads/current_version.txt)

    [ ! -f mcgalaxy_${MC_VER}.zip ] && {

	wget --progress=dot:mega -O mcgalaxy_${MC_VER}.zip \
	    $GH1/$REPO/releases/download/$MC_VER/mcgalaxy_${MC_VER}.zip
    }
    cp -p mcgalaxy_${MC_VER}.zip "$O"/mcgalaxy_bin.zip

    cd "$PREFIX"

    # Expected executables, clear out old ones.
    rm -f \
	LibNoise.dll LibNoise.dll.so MCGalaxy.exe MCGalaxy.exe.config \
	MCGalaxy.exe.so MCGalaxyCLI.exe MCGalaxyCLI.exe.config \
	MCGalaxyCLI.exe.so MCGalaxy_.dll MCGalaxy_.dll.config \
	MCGalaxy_.dll.so MySql.Data.dll MySql.Data.dll.so Newtonsoft.Json.dll \
	Newtonsoft.Json.dll.so System.Data.SQLite.dll Updater.exe \
	Updater.exe.config Updater.exe.so sqlite3.dll sqlite3_x32.dll \
	sqlite3_x64.dll \

    unzip -q -o "$O"/mcgalaxy_bin.zip
fi

# Startup the web server.
[ -d /opt/mcgalaxy/client ] && {
    mkdir -p webclient
    cp -a /opt/mcgalaxy/client/. webclient/.
    cp -p /opt/mcgalaxy/default.zip webclient/.
    /usr/sbin/mini_httpd -D 2>>/home/user/web.log \
	-p 8080 \
	-d /home/user/webclient \
	-c \*.jsp &
    HTTPID=$!
}

# Work around docker bug. (tty size is updated late)
[ "$(stty size 2>/dev/null)" = "0 0" ] && {
    for i in 1 2 3 4 5 ; do [ "$(stty size)" = "0 0" ] && sleep 1 ; done
    [ "$(stty size)" = "0 0" ] && {
	echo 'WARNING: Not using rlwrap because stty failed.'
	export TERM=dumb
	exec mono "$PREFIX"/MCGalaxyCLI.exe
    }
}

# Mono tries to be evil to the tty, rlwrap is easily confused.

# This fifo is so we can send huge lines to MCGalaxy for /mb
rm -f toserver ||:
mkfifo toserver ||:

# Things to check:
#  1) Command line history from rlwrap
#  2) /shutdown 1 completes and ends the container.
#  3) /restart does not end the container.
#  4) Large commands >4k can be sent into toserver from outside the container.
#  5) For very large commands >50Mb make sure you clean up MCGalaxy.db

export HTTPID
exec rlwrap -a -t dumb sh -c '
    { 
	while cat toserver ; do :; done &
	cat /dev/tty &
    } 2>/dev/null |
    mono "$PREFIX"/MCGalaxyCLI.exe |
    cut -b1-320
    kill -9 "$HTTPID"
    '

COMMIT
################################################################################

COPY --from=context --chown=user:user /opt/mcgalaxy/default.zip ./

WORKDIR /opt/mcgalaxy/client
COPY --from=webclient /src/cc.* ./
COPY --from=windowsclient /opt/classicube/src/*.exe ./

# This directory is where the data is stored
# The the script may copy the executables here too.
WORKDIR /home/user
CMD [ "sh","-c","/opt/mcgalaxy/start_mcgalaxy"]
EXPOSE 25565

